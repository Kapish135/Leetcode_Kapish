class Node{
    public:
    Node* link[26];
    bool flag = false;

    bool containsKey(char ch) {
        return (link[ch-'a'] != NULL);   
    }

    void put(char ch,Node* node) {link[ch-'a'] = node;}

    Node* get(char ch) {return link[ch-'a'];}
};
class Trie {
    private:
        Node* root;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node* node = root;

        for(int i = 0;i < word.size();i++){
            if(!node->containsKey(word[i])){
                node->put(word[i],new Node());
            }

            node = node->get(word[i]);
        }
        node->flag = true;
    }
    
    bool search(string word) {
        Node* node = root;
        for(int i=0;i < word.size();i++){
            if(!node->containsKey(word[i])) return false;

            node = node -> get(word[i]);
        }
        return node->flag;
    }
    
    bool startsWith(string prefix) {
        Node* node = root;

        for(int i=0;i < prefix.size();i++){
            if(!node->containsKey(prefix[i])) return false;

            node = node->get(prefix[i]);
        }
        return true;
    }
};
