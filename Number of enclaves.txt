class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int cnt = 0;
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int,int>>q;
        vector<vector<int>>vis(m,vector<int>(n,0));
        
        auto is_exit = [&](int i,int j) ->int{
            return (i*j == 0 || i == m-1 || j == n - 1);
        };
        
        for(int i = 0;i < m;i++){
            for(int j =0;j < n;j++){
                if(grid[i][j] == 1 && is_exit(i,j)){
                    q.push({i,j});
                    vis[i][j] = 1;
                }
            }
        }
        
        int dr[] = {-1,0,1,0};
	    int dc[] = {0,1,0,-1};
	    while(!q.empty()){
	        int r = q.front().first;
	        int c = q.front().second;
	        q.pop();
	        for(int i =0;i < 4;i++){
	            int nr = r + dr[i];
	            int nc = c + dc[i];
	            
	            if(nr >=0 && nc>=0 && nr < m && nc < n && grid[nr][nc] == 1 &&!vis[nr][nc]){
	                vis[nr][nc] = 1;
	                q.push({nr,nc});
	            }
	        }
	    }
	    for(int i = 0;i < m;i++){
            for(int j =0;j < n;j++) if(grid[i][j] == 1 && !vis[i][j]) cnt++;
        }
        return cnt;
    }
};