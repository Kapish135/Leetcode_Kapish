class Solution {
public:
    // int dfs(vector<vector<int>>&grid,int i,int j,int n,int m,vector<vector<int>>&dp){

    //     if(i < 0 || j < 0 || i >=n || j >= m) return 1e9;

    //     if(grid[i][j] == 1) return 0;

    //     if(dp[i][j] != -1) return dp[i][j];
    //     int ans1 = 1 + dfs(grid,i,j-1,n,m,dp);

    //     int ans2 = 1 + dfs(grid,i-1,j,n,m,dp);

        
    //     return dp[i][j] = min(ans1,ans2);
    // }
    int maxDistance(vector<vector<int>>& grid) {
        int ans = -1;
        queue<pair<int,int>>q;

        int m = grid.size();
        int n = grid[0].size();
        for(auto i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == 1) q.push({i,j});
            }
        }
        if(q.size() == 0 || q.size() == n * n) return -1;
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();
                for(int i = 0;i < 4;i++){
                    int nrow = row + drow[i];
                    int ncol = col + dcol[i];

                    if( nrow>=0 && ncol >=0 && nrow < m && ncol < n && grid[nrow][ncol] == 0){
                        grid[nrow][ncol] = 1;
                        q.push({nrow,ncol});
                    }
                }
            }
            ans++;
        }
        return ans;
    }
};